const express = require('express');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');

puppeteer.use(StealthPlugin());

const app = express();
const port = 3000;

app.get('/get-links', async (req, res) => {
  const { query } = req.query;
  if (!query) {
    return res.status(400).json({ error: 'Query parameter is required' });
  }

  const browser = await puppeteer.launch({
    headless: true,
    userDataDir: './user_data',
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--lang=fr-FR'],
    defaultViewport: null
  });

  const page = await browser.newPage();

  try {
    console.log("‚è≥ –û—Ç–∫—Ä—ã—Ç–∏–µ ChatGPT...");
    await page.goto('https://chatgpt.com/chat', { waitUntil: 'networkidle2' });

    await new Promise(resolve => setTimeout(resolve, 1000));
    await page.screenshot({ path: 'initial_page.png' });

    console.log("üîç Looking for 'Stay logged out' link in the modal popup...");
    await page.screenshot({ path: 'login_modal.png' });

    const pageContent = await page.content();
    if (pageContent.includes('Thanks for trying ChatGPT')) {
      console.log("‚úÖ Found the ChatGPT login modal popup (based on text)");
    }

    try {
      await page.waitForSelector('[role="dialog"]', { timeout: 1000 });
      console.log("‚úÖ Modal detected (based on [role='dialog'])");

      const clickResult = await page.evaluate(() => {
        const elementsToTry = [
          ...Array.from(document.querySelectorAll('a, button')).filter(el =>
            el.textContent.trim().toLowerCase().includes('stay logged out') ||
            el.textContent.trim().toLowerCase().includes('rester d√©connect√©')
          ),
          document.querySelector('a.text-token-text-secondary.mt-5'),
          document.querySelector('[data-testid="modal-no-auth-rate-limit"] a.underline')
        ];

        for (let i = 0; i < elementsToTry.length; i++) {
          const element = elementsToTry[i];
          if (element) {
            console.log(`Found "Stay logged out" link/button with attempt ${i + 1}`);
            element.click();
            return { clicked: true, method: `attempt ${i + 1}` };
          }
        }
        return { clicked: false };
      });

      if (clickResult.clicked) {
        console.log(`‚úÖ Clicked 'Stay logged out' link using ${clickResult.method}`);
      } else {
        console.log("‚ùå Could not find 'Stay logged out' link via JavaScript evaluate attempts.");
      }
    } catch (modalErr) {
      console.log("Modal not found or other error during modal handling:", modalErr.message);
      console.log("Continuing without explicit modal dismissal.");
    }

    await new Promise(resolve => setTimeout(resolve, 1000));
    await page.screenshot({ path: 'after_modal_interaction_attempt.png' });

    const isModalStillThere = await page.evaluate(() => {
        return !!document.querySelector('[data-testid="modal-no-auth-rate-limit"]') ||
               !!document.querySelector('[role="dialog"]');
    });

    if (isModalStillThere) {
        console.warn("‚ö†Ô∏è Modal might still be visible. Check screenshot 'after_modal_interaction_attempt.png'.");
    }

    console.log("‚åõ Waiting for input field...");
    let inputFieldFound = false;
    const inputSelectors = [
        '#prompt-textarea',
        'textarea[placeholder*="Message"]',
        'textarea[data-id="root"]',
        'textarea',
        '[contenteditable="true"]'
    ];
    let finalInputSelector = null;

    for (const selector of inputSelectors) {
        try {
            await page.waitForSelector(selector, { visible: true, timeout: 1000 });
            console.log(`‚úÖ Found input field with selector: ${selector}`);
            finalInputSelector = selector;
            inputFieldFound = true;
            break;
        } catch (err) {
            console.log(`‚ùå Selector "${selector}" not found or not visible.`);
        }
    }

    if (!inputFieldFound) {
        console.error("‚ùå Could not find any input field after multiple attempts.");
        const pageElements = await page.evaluate(() => ({ // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            textareas: document.querySelectorAll('textarea').length,
            inputs: document.querySelectorAll('input').length,
            contentEditables: document.querySelectorAll('[contenteditable="true"]').length,
            buttons: Array.from(document.querySelectorAll('button')).map(b => b.outerHTML.substring(0,150)), // –ù–∞—á–∞–ª–æ HTML –∫–Ω–æ–ø–æ–∫
            visibleText: Array.from(document.querySelectorAll('p, h1, h2, h3, h4, h5, span')).slice(0, 10).map(el => el.textContent.trim()).filter(Boolean)
        }));
        console.log("Page analysis for missing input:", JSON.stringify(pageElements, null, 2));
        await page.screenshot({ path: 'input_field_not_found.png' });
        throw new Error("Could not interact with ChatGPT interface - no input field found");
    }

    console.log(`Typing into: ${finalInputSelector}`);
    await page.type(finalInputSelector, query, { delay: 50 });

    // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò ---

    // –®–∞–≥ 1: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Search"
    let specificSearchButtonClicked = false;
    console.log("üîç (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –∫–Ω–æ–ø–∫—É 'Search'...");
    const specificSearchButtonSelectors = [
        'button[data-testid="composer-button-search"]',
        'button[aria-label="Search"]'
    ];

    for (const selector of specificSearchButtonSelectors) {
        try {
            const buttonElement = await page.waitForSelector(selector, { visible: true, timeout: 2000 });
            if (buttonElement) {
                await buttonElement.click();
                console.log(`‚úÖ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ 'Search' –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
                specificSearchButtonClicked = true;
                await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                break;
            }
        } catch (err) {
            console.log(`üü° (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö–Ω–æ–ø–∫–∞ 'Search' —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞.`);
        }
    }

    if (specificSearchButtonClicked) {
        console.log("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Search' –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞. –¢–µ–ø–µ—Ä—å –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    } else {
        console.log("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Search' –Ω–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    }

    // –®–∞–≥ 2: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ Enter
    console.log("üîç –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ ('Send prompt')...");
    const mainSendButtonSelectors = [
        'button#composer-submit-button',
        'button[data-testid="send-button"]',
        'button[aria-label="Send prompt"]',
        'button[aria-label*="Send"]',
        'button[type="submit"]'
    ];
    let mainSendButtonClicked = false;

    for (const selector of mainSendButtonSelectors) {
        try {
            const buttonElement = await page.waitForSelector(selector, { visible: true, timeout: 5000 });
            if (buttonElement) {
                await buttonElement.click();
                console.log(`‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
                mainSendButtonClicked = true;
                break;
            }
        } catch (err) {
            console.log(`üü° –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞.`);
        }
    }

    if (!mainSendButtonClicked) {
        console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter.");
        await page.keyboard.press('Enter');
    }
    console.log("üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò ---

    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT...");
    try {
        await page.waitForFunction(() => {
                const stopGeneratingButton = document.querySelector('button[aria-label*="Stop generating"]');
                if (stopGeneratingButton) return false;
                const sendButtonStillActive = document.querySelector('button[data-testid="send-button"]:not(:disabled)'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å—Ç–∞—Ä–∞—è)
                if (sendButtonStillActive && document.querySelector('#prompt-textarea')?.value === '') return false; // –ò –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ
                // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ: –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
                const thinkingIndicator = document.querySelector('.result-streaming') || document.querySelector('[class*="typing"]'); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                if(thinkingIndicator) return false;
                return true; // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            },
            { timeout: 90000 } // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        );
        console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç ChatGPT –ø–æ–ª—É—á–µ–Ω (–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞/–∑–∞–≤–µ—Ä—à–µ–Ω–∞).");
    } catch (waitErr) {
        console.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º. –°–∫—Ä–∏–Ω—à–æ—Ç: 'before_collecting_links_timeout.png'");
        await page.screenshot({ path: 'before_collecting_links_timeout.png' });
    }

    await new Promise(resolve => setTimeout(resolve, 20000)); // –î–æ–ø. –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥

    console.log("üîó –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
    const links = await page.evaluate(() => {
        const contentArea = document.querySelector('main') || document.body;
        return Array.from(contentArea.querySelectorAll('a'))
            .map(anchor => ({
                href: anchor.href,
                text: anchor.innerText.trim()
            }))
            .filter(l => l.href && (l.href.startsWith('http://') || l.href.startsWith('https://')) && l.text);
    });

    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫.`);
    await page.screenshot({ path: 'result_with_sources.png' });
    res.json({ query, links });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ try:", err.message, err.stack);
    if (page && !page.isClosed()) {
        try {
            const content = await page.content();
            console.log("üîç HTML –≤–æ –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):");
            console.log(content.substring(0, 1000) + "...");
            await page.screenshot({ path: 'error_page.png' });
        } catch (secondaryError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏:", secondaryError.message);
        }
    }
    res.status(500).json({ error: 'Failed to fetch links', details: err.message });
  } finally {
    if (browser) {
      await browser.close();
      console.log("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.");
    }
  }
});

app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
